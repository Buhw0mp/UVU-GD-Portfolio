
global proc float addValues(float $input[])
{
    float $result = 0;
    for ($num in $input)
    {
        $result += $num;
    }
    return $result;
}

global proc float subtractValues(float $input[])
{
    if (size($input) == 0) {
        warning("No input values provided.");
        return 0;
    }
    float $result = $input[0];
    for ($i = 1; $i < size($input); $i++)
    {
        $result -= $input[$i];
    }
    return $result;
}

global proc float multiplyValues(float $input[])
{
    if (size($input) == 0) {
        warning("No input values provided.");
        return 0;
    }
    float $result = 1;
    for ($num in $input)
    {
        $result *= $num;
    }
    return $result;
}

global proc float divideValues(float $input[])
{
    if (size($input) == 0) {
        warning("No input values provided.");
        return 0;
    }
    float $result = $input[0];
    for ($i = 1; $i < size($input); $i++)
    {
        if ($input[$i] == 0)
        {
            warning("Cannot divide by zero. Returning the current result.");
            return $result;
        }
        $result /= $input[$i];
    }
    return $result;
}

global proc float powerValues(float $input[]) {
    if (size($input) < 2) {
        warning("powerValues requires at least two values (base and exponent).");
        return 0;
    }
    float $base = $input[0];
    float $exponent = $input[1];
    return pow($base, $exponent);
}

global proc float meanValues(float $input[])
{
    if (size($input) == 0) {
        warning("No input values provided.");
        return 0;
    }
    float $total = addValues($input);
    return $total / size($input);
}

global proc float medianValues(float $input[])
{
    if (size($input) == 0) {
        warning("No input values provided.");
        return 0;
    }

    float $sorted[] = $input;
    sort $sorted;

    int $n = size($sorted);
    if ($n % 2 == 1)
    {
        return $sorted[$n / 2];
    }
    else
    {
        return ($sorted[($n / 2) - 1] + $sorted[$n / 2]) / 2.0;
    }
}

global proc float calculator(string $operation, float $input[])
{
    float $result = 0;

    if ($operation == "add")
    {
        $result = addValues($input);
        print("The sum of " + floatArrayToString($input, ", ") + " is " + $result + "\n");
    }
    else if ($operation == "subtract")
    {
        $result = subtractValues($input);
        print("The difference of " + floatArrayToString($input, ", ") + " is " + $result + "\n");
    }
    else if ($operation == "multiply")
    {
        $result = multiplyValues($input);
        print("The product of " + floatArrayToString($input, ", ") + " is " + $result + "\n");
    }
    else if ($operation == "divide")
    {
        $result = divideValues($input);
        print("The quotient of " + floatArrayToString($input, ", ") + " is " + $result + "\n");
    }
    else if ($operation == "power")
    {
        $result = powerValues($input);
        print("The power of (the first two numbers)" + floatArrayToString($input, ", ") + " is " + $result + "\n");
    }
    else if ($operation == "mean")
    {
        $result = meanValues($input);
        print("The mean of " + floatArrayToString($input, ", ") + " is " + $result + "\n");
    }
    else if ($operation == "median")
    {
        $result = medianValues($input);
        print("The median of " + floatArrayToString($input, ", ") + " is " + $result + "\n");
    }
    else
    {
        warning("Invalid operation: " + $operation);
        return 0;
    }
    return $result;
}

global proc string floatArrayToString(float $array[], string $punctuation)
{
    string $result = "";
    for ($i = 0; $i < size($array); $i++)
    {
        $result += ($array[$i] + "");
        if ($i < size($array) - 1)
        {
            $result += $punctuation;
        }
    }
    return $result;
}

global proc testCalculator()
{
    float $numbers[] = {4.0, 2.0, 8.0, 6.0};
    calculator("add", $numbers);
    calculator("subtract", $numbers);
    calculator("multiply", $numbers);
    calculator("divide", $numbers);
    calculator("power", $numbers);
    calculator("mean", $numbers);
    calculator("median", $numbers);
}

testCalculator();
